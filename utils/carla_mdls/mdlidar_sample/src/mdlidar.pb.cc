// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mdlidar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mdlidar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mdlidar {
class Vector3DDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vector3D> {
} _Vector3D_default_instance_;
class OrientationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Orientation> {
} _Orientation_default_instance_;
class StateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<State> {
} _State_default_instance_;
class PointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point> {
} _Point_default_instance_;
class FrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Frame> {
} _Frame_default_instance_;
class HeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Header> {
} _Header_default_instance_;

namespace protobuf_mdlidar_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, axis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, angle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, position_p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, orientation_p_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, dynamic_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, object_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, object_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, delta_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, channels_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, points_count_by_channel_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Vector3D)},
  { 8, -1, sizeof(Orientation)},
  { 15, -1, sizeof(State)},
  { 24, -1, sizeof(Point)},
  { 33, -1, sizeof(Frame)},
  { 43, -1, sizeof(Header)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector3D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Orientation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Frame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Header_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mdlidar.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _Vector3D_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Orientation_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _State_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Point_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Frame_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Header_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Vector3D_default_instance_.DefaultConstruct();
  _Orientation_default_instance_.DefaultConstruct();
  _State_default_instance_.DefaultConstruct();
  _Point_default_instance_.DefaultConstruct();
  _Frame_default_instance_.DefaultConstruct();
  _Header_default_instance_.DefaultConstruct();
  _Orientation_default_instance_.get_mutable()->axis_ = const_cast< ::mdlidar::Vector3D*>(
      ::mdlidar::Vector3D::internal_default_instance());
  _State_default_instance_.get_mutable()->position_ = const_cast< ::mdlidar::Vector3D*>(
      ::mdlidar::Vector3D::internal_default_instance());
  _State_default_instance_.get_mutable()->orientation_ = const_cast< ::mdlidar::Orientation*>(
      ::mdlidar::Orientation::internal_default_instance());
  _State_default_instance_.get_mutable()->position_p_ = const_cast< ::mdlidar::Vector3D*>(
      ::mdlidar::Vector3D::internal_default_instance());
  _State_default_instance_.get_mutable()->orientation_p_ = const_cast< ::mdlidar::Orientation*>(
      ::mdlidar::Orientation::internal_default_instance());
  _Frame_default_instance_.get_mutable()->state_ = const_cast< ::mdlidar::State*>(
      ::mdlidar::State::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rmdlidar.proto\022\007mdlidar\"+\n\010Vector3D\022\t\n\001"
      "x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"=\n\013Orienta"
      "tion\022\037\n\004axis\030\001 \001(\0132\021.mdlidar.Vector3D\022\r\n"
      "\005angle\030\002 \001(\002\"\253\001\n\005State\022#\n\010position\030\001 \001(\013"
      "2\021.mdlidar.Vector3D\022)\n\013orientation\030\002 \001(\013"
      "2\024.mdlidar.Orientation\022%\n\nposition_p\030\003 \001"
      "(\0132\021.mdlidar.Vector3D\022+\n\rorientation_p\030\004"
      " \001(\0132\024.mdlidar.Orientation\"L\n\005Point\022\r\n\005r"
      "ange\030\001 \001(\002\022\020\n\010rotation\030\002 \001(\002\022\021\n\tobject_i"
      "d\030\003 \001(\005\022\017\n\007dynamic\030\004 \001(\010\"\222\001\n\005Frame\022\022\n\nst"
      "art_time\030\001 \001(\003\022\020\n\010end_time\030\002 \001(\003\022\036\n\006poin"
      "ts\030\003 \003(\0132\016.mdlidar.Point\022\035\n\005state\030\004 \001(\0132"
      "\016.mdlidar.State\022$\n\014object_state\030\005 \003(\0132\016."
      "mdlidar.State\"i\n\006Header\022\022\n\nobject_ids\030\001 "
      "\003(\r\022\022\n\ndelta_time\030\002 \001(\002\022\026\n\016channels_coun"
      "t\030\003 \001(\005\022\037\n\027points_count_by_channel\030\004 \001(\r"
      "B\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 653);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mdlidar.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mdlidar_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3D::kXFieldNumber;
const int Vector3D::kYFieldNumber;
const int Vector3D::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3D::Vector3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mdlidar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mdlidar.Vector3D)
}
Vector3D::Vector3D(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mdlidar_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mdlidar.Vector3D)
}
Vector3D::Vector3D(const Vector3D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mdlidar.Vector3D)
}

void Vector3D::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Vector3D::~Vector3D() {
  // @@protoc_insertion_point(destructor:mdlidar.Vector3D)
  SharedDtor();
}

void Vector3D::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Vector3D::ArenaDtor(void* object) {
  Vector3D* _this = reinterpret_cast< Vector3D* >(object);
  (void)_this;
}
void Vector3D::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Vector3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3D::descriptor() {
  protobuf_mdlidar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mdlidar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3D& Vector3D::default_instance() {
  protobuf_mdlidar_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector3D* Vector3D::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Vector3D>(arena);
}

void Vector3D::Clear() {
// @@protoc_insertion_point(message_clear_start:mdlidar.Vector3D)
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

bool Vector3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mdlidar.Vector3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mdlidar.Vector3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mdlidar.Vector3D)
  return false;
#undef DO_
}

void Vector3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mdlidar.Vector3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:mdlidar.Vector3D)
}

::google::protobuf::uint8* Vector3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mdlidar.Vector3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mdlidar.Vector3D)
  return target;
}

size_t Vector3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mdlidar.Vector3D)
  size_t total_size = 0;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mdlidar.Vector3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mdlidar.Vector3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mdlidar.Vector3D)
    MergeFrom(*source);
  }
}

void Vector3D::MergeFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mdlidar.Vector3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mdlidar.Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3D::CopyFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mdlidar.Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3D::IsInitialized() const {
  return true;
}

void Vector3D::Swap(Vector3D* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Vector3D* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Vector3D::UnsafeArenaSwap(Vector3D* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Vector3D::InternalSwap(Vector3D* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3D::GetMetadata() const {
  protobuf_mdlidar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mdlidar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3D

// float x = 1;
void Vector3D::clear_x() {
  x_ = 0;
}
float Vector3D::x() const {
  // @@protoc_insertion_point(field_get:mdlidar.Vector3D.x)
  return x_;
}
void Vector3D::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:mdlidar.Vector3D.x)
}

// float y = 2;
void Vector3D::clear_y() {
  y_ = 0;
}
float Vector3D::y() const {
  // @@protoc_insertion_point(field_get:mdlidar.Vector3D.y)
  return y_;
}
void Vector3D::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:mdlidar.Vector3D.y)
}

// float z = 3;
void Vector3D::clear_z() {
  z_ = 0;
}
float Vector3D::z() const {
  // @@protoc_insertion_point(field_get:mdlidar.Vector3D.z)
  return z_;
}
void Vector3D::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:mdlidar.Vector3D.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Orientation::_slow_mutable_axis() {
  axis_ = ::google::protobuf::Arena::CreateMessage< ::mdlidar::Vector3D >(
      GetArenaNoVirtual());
}
::mdlidar::Vector3D* Orientation::_slow_release_axis() {
  if (axis_ == NULL) {
    return NULL;
  } else {
    ::mdlidar::Vector3D* temp = new ::mdlidar::Vector3D(*axis_);
    axis_ = NULL;
    return temp;
  }
}
::mdlidar::Vector3D* Orientation::unsafe_arena_release_axis() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mdlidar.Orientation.axis)
  
  ::mdlidar::Vector3D* temp = axis_;
  axis_ = NULL;
  return temp;
}
void Orientation::_slow_set_allocated_axis(
    ::google::protobuf::Arena* message_arena, ::mdlidar::Vector3D** axis) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*axis) == NULL) {
      message_arena->Own(*axis);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*axis)) {
      ::mdlidar::Vector3D* new_axis = 
            ::google::protobuf::Arena::CreateMessage< ::mdlidar::Vector3D >(
            message_arena);
      new_axis->CopyFrom(**axis);
      *axis = new_axis;
    }
}
void Orientation::unsafe_arena_set_allocated_axis(
    ::mdlidar::Vector3D* axis) {
  if (GetArenaNoVirtual() == NULL) {
    delete axis_;
  }
  axis_ = axis;
  if (axis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mdlidar.Orientation.axis)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Orientation::kAxisFieldNumber;
const int Orientation::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Orientation::Orientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mdlidar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mdlidar.Orientation)
}
Orientation::Orientation(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mdlidar_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mdlidar.Orientation)
}
Orientation::Orientation(const Orientation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_axis()) {
    axis_ = new ::mdlidar::Vector3D(*from.axis_);
  } else {
    axis_ = NULL;
  }
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:mdlidar.Orientation)
}

void Orientation::SharedCtor() {
  ::memset(&axis_, 0, reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&axis_) + sizeof(angle_));
  _cached_size_ = 0;
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:mdlidar.Orientation)
  SharedDtor();
}

void Orientation::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete axis_;
  }
}

void Orientation::ArenaDtor(void* object) {
  Orientation* _this = reinterpret_cast< Orientation* >(object);
  (void)_this;
}
void Orientation::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Orientation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Orientation::descriptor() {
  protobuf_mdlidar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mdlidar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Orientation& Orientation::default_instance() {
  protobuf_mdlidar_2eproto::InitDefaults();
  return *internal_default_instance();
}

Orientation* Orientation::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Orientation>(arena);
}

void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:mdlidar.Orientation)
  if (GetArenaNoVirtual() == NULL && axis_ != NULL) {
    delete axis_;
  }
  axis_ = NULL;
  angle_ = 0;
}

bool Orientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mdlidar.Orientation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mdlidar.Vector3D axis = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mdlidar.Orientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mdlidar.Orientation)
  return false;
#undef DO_
}

void Orientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mdlidar.Orientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mdlidar.Vector3D axis = 1;
  if (this->has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->axis_, output);
  }

  // float angle = 2;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle(), output);
  }

  // @@protoc_insertion_point(serialize_end:mdlidar.Orientation)
}

::google::protobuf::uint8* Orientation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mdlidar.Orientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mdlidar.Vector3D axis = 1;
  if (this->has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->axis_, deterministic, target);
  }

  // float angle = 2;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mdlidar.Orientation)
  return target;
}

size_t Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mdlidar.Orientation)
  size_t total_size = 0;

  // .mdlidar.Vector3D axis = 1;
  if (this->has_axis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->axis_);
  }

  // float angle = 2;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Orientation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mdlidar.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  const Orientation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Orientation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mdlidar.Orientation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mdlidar.Orientation)
    MergeFrom(*source);
  }
}

void Orientation::MergeFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mdlidar.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_axis()) {
    mutable_axis()->::mdlidar::Vector3D::MergeFrom(from.axis());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
}

void Orientation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mdlidar.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mdlidar.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  return true;
}

void Orientation::Swap(Orientation* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Orientation* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Orientation::UnsafeArenaSwap(Orientation* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Orientation::InternalSwap(Orientation* other) {
  std::swap(axis_, other->axis_);
  std::swap(angle_, other->angle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Orientation::GetMetadata() const {
  protobuf_mdlidar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mdlidar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Orientation

// .mdlidar.Vector3D axis = 1;
bool Orientation::has_axis() const {
  return this != internal_default_instance() && axis_ != NULL;
}
void Orientation::clear_axis() {
  if (GetArenaNoVirtual() == NULL && axis_ != NULL) delete axis_;
  axis_ = NULL;
}
const ::mdlidar::Vector3D& Orientation::axis() const {
  // @@protoc_insertion_point(field_get:mdlidar.Orientation.axis)
  return axis_ != NULL ? *axis_
                         : *::mdlidar::Vector3D::internal_default_instance();
}
::mdlidar::Vector3D* Orientation::mutable_axis() {
  
  if (axis_ == NULL) {
    _slow_mutable_axis();
  }
  // @@protoc_insertion_point(field_mutable:mdlidar.Orientation.axis)
  return axis_;
}
::mdlidar::Vector3D* Orientation::release_axis() {
  // @@protoc_insertion_point(field_release:mdlidar.Orientation.axis)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_axis();
  } else {
    ::mdlidar::Vector3D* temp = axis_;
    axis_ = NULL;
    return temp;
  }
}
 void Orientation::set_allocated_axis(::mdlidar::Vector3D* axis) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete axis_;
  }
  if (axis != NULL) {
    _slow_set_allocated_axis(message_arena, &axis);
  }
  axis_ = axis;
  if (axis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mdlidar.Orientation.axis)
}

// float angle = 2;
void Orientation::clear_angle() {
  angle_ = 0;
}
float Orientation::angle() const {
  // @@protoc_insertion_point(field_get:mdlidar.Orientation.angle)
  return angle_;
}
void Orientation::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:mdlidar.Orientation.angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void State::_slow_mutable_position() {
  position_ = ::google::protobuf::Arena::CreateMessage< ::mdlidar::Vector3D >(
      GetArenaNoVirtual());
}
::mdlidar::Vector3D* State::_slow_release_position() {
  if (position_ == NULL) {
    return NULL;
  } else {
    ::mdlidar::Vector3D* temp = new ::mdlidar::Vector3D(*position_);
    position_ = NULL;
    return temp;
  }
}
::mdlidar::Vector3D* State::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mdlidar.State.position)
  
  ::mdlidar::Vector3D* temp = position_;
  position_ = NULL;
  return temp;
}
void State::_slow_set_allocated_position(
    ::google::protobuf::Arena* message_arena, ::mdlidar::Vector3D** position) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*position) == NULL) {
      message_arena->Own(*position);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*position)) {
      ::mdlidar::Vector3D* new_position = 
            ::google::protobuf::Arena::CreateMessage< ::mdlidar::Vector3D >(
            message_arena);
      new_position->CopyFrom(**position);
      *position = new_position;
    }
}
void State::unsafe_arena_set_allocated_position(
    ::mdlidar::Vector3D* position) {
  if (GetArenaNoVirtual() == NULL) {
    delete position_;
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mdlidar.State.position)
}
void State::_slow_mutable_orientation() {
  orientation_ = ::google::protobuf::Arena::CreateMessage< ::mdlidar::Orientation >(
      GetArenaNoVirtual());
}
::mdlidar::Orientation* State::_slow_release_orientation() {
  if (orientation_ == NULL) {
    return NULL;
  } else {
    ::mdlidar::Orientation* temp = new ::mdlidar::Orientation(*orientation_);
    orientation_ = NULL;
    return temp;
  }
}
::mdlidar::Orientation* State::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mdlidar.State.orientation)
  
  ::mdlidar::Orientation* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void State::_slow_set_allocated_orientation(
    ::google::protobuf::Arena* message_arena, ::mdlidar::Orientation** orientation) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*orientation) == NULL) {
      message_arena->Own(*orientation);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*orientation)) {
      ::mdlidar::Orientation* new_orientation = 
            ::google::protobuf::Arena::CreateMessage< ::mdlidar::Orientation >(
            message_arena);
      new_orientation->CopyFrom(**orientation);
      *orientation = new_orientation;
    }
}
void State::unsafe_arena_set_allocated_orientation(
    ::mdlidar::Orientation* orientation) {
  if (GetArenaNoVirtual() == NULL) {
    delete orientation_;
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mdlidar.State.orientation)
}
void State::_slow_mutable_position_p() {
  position_p_ = ::google::protobuf::Arena::CreateMessage< ::mdlidar::Vector3D >(
      GetArenaNoVirtual());
}
::mdlidar::Vector3D* State::_slow_release_position_p() {
  if (position_p_ == NULL) {
    return NULL;
  } else {
    ::mdlidar::Vector3D* temp = new ::mdlidar::Vector3D(*position_p_);
    position_p_ = NULL;
    return temp;
  }
}
::mdlidar::Vector3D* State::unsafe_arena_release_position_p() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mdlidar.State.position_p)
  
  ::mdlidar::Vector3D* temp = position_p_;
  position_p_ = NULL;
  return temp;
}
void State::_slow_set_allocated_position_p(
    ::google::protobuf::Arena* message_arena, ::mdlidar::Vector3D** position_p) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*position_p) == NULL) {
      message_arena->Own(*position_p);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*position_p)) {
      ::mdlidar::Vector3D* new_position_p = 
            ::google::protobuf::Arena::CreateMessage< ::mdlidar::Vector3D >(
            message_arena);
      new_position_p->CopyFrom(**position_p);
      *position_p = new_position_p;
    }
}
void State::unsafe_arena_set_allocated_position_p(
    ::mdlidar::Vector3D* position_p) {
  if (GetArenaNoVirtual() == NULL) {
    delete position_p_;
  }
  position_p_ = position_p;
  if (position_p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mdlidar.State.position_p)
}
void State::_slow_mutable_orientation_p() {
  orientation_p_ = ::google::protobuf::Arena::CreateMessage< ::mdlidar::Orientation >(
      GetArenaNoVirtual());
}
::mdlidar::Orientation* State::_slow_release_orientation_p() {
  if (orientation_p_ == NULL) {
    return NULL;
  } else {
    ::mdlidar::Orientation* temp = new ::mdlidar::Orientation(*orientation_p_);
    orientation_p_ = NULL;
    return temp;
  }
}
::mdlidar::Orientation* State::unsafe_arena_release_orientation_p() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mdlidar.State.orientation_p)
  
  ::mdlidar::Orientation* temp = orientation_p_;
  orientation_p_ = NULL;
  return temp;
}
void State::_slow_set_allocated_orientation_p(
    ::google::protobuf::Arena* message_arena, ::mdlidar::Orientation** orientation_p) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*orientation_p) == NULL) {
      message_arena->Own(*orientation_p);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*orientation_p)) {
      ::mdlidar::Orientation* new_orientation_p = 
            ::google::protobuf::Arena::CreateMessage< ::mdlidar::Orientation >(
            message_arena);
      new_orientation_p->CopyFrom(**orientation_p);
      *orientation_p = new_orientation_p;
    }
}
void State::unsafe_arena_set_allocated_orientation_p(
    ::mdlidar::Orientation* orientation_p) {
  if (GetArenaNoVirtual() == NULL) {
    delete orientation_p_;
  }
  orientation_p_ = orientation_p;
  if (orientation_p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mdlidar.State.orientation_p)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kPositionFieldNumber;
const int State::kOrientationFieldNumber;
const int State::kPositionPFieldNumber;
const int State::kOrientationPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mdlidar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mdlidar.State)
}
State::State(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mdlidar_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mdlidar.State)
}
State::State(const State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::mdlidar::Vector3D(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::mdlidar::Orientation(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  if (from.has_position_p()) {
    position_p_ = new ::mdlidar::Vector3D(*from.position_p_);
  } else {
    position_p_ = NULL;
  }
  if (from.has_orientation_p()) {
    orientation_p_ = new ::mdlidar::Orientation(*from.orientation_p_);
  } else {
    orientation_p_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mdlidar.State)
}

void State::SharedCtor() {
  ::memset(&position_, 0, reinterpret_cast<char*>(&orientation_p_) -
    reinterpret_cast<char*>(&position_) + sizeof(orientation_p_));
  _cached_size_ = 0;
}

State::~State() {
  // @@protoc_insertion_point(destructor:mdlidar.State)
  SharedDtor();
}

void State::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete position_;
  }
  if (this != internal_default_instance()) {
    delete orientation_;
  }
  if (this != internal_default_instance()) {
    delete position_p_;
  }
  if (this != internal_default_instance()) {
    delete orientation_p_;
  }
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_mdlidar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mdlidar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const State& State::default_instance() {
  protobuf_mdlidar_2eproto::InitDefaults();
  return *internal_default_instance();
}

State* State::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<State>(arena);
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:mdlidar.State)
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
  if (GetArenaNoVirtual() == NULL && position_p_ != NULL) {
    delete position_p_;
  }
  position_p_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_p_ != NULL) {
    delete orientation_p_;
  }
  orientation_p_ = NULL;
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mdlidar.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mdlidar.Vector3D position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mdlidar.Orientation orientation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mdlidar.Vector3D position_p = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position_p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mdlidar.Orientation orientation_p = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation_p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mdlidar.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mdlidar.State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mdlidar.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mdlidar.Vector3D position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // .mdlidar.Orientation orientation = 2;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_, output);
  }

  // .mdlidar.Vector3D position_p = 3;
  if (this->has_position_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_p_, output);
  }

  // .mdlidar.Orientation orientation_p = 4;
  if (this->has_orientation_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->orientation_p_, output);
  }

  // @@protoc_insertion_point(serialize_end:mdlidar.State)
}

::google::protobuf::uint8* State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mdlidar.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mdlidar.Vector3D position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, deterministic, target);
  }

  // .mdlidar.Orientation orientation = 2;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orientation_, deterministic, target);
  }

  // .mdlidar.Vector3D position_p = 3;
  if (this->has_position_p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->position_p_, deterministic, target);
  }

  // .mdlidar.Orientation orientation_p = 4;
  if (this->has_orientation_p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->orientation_p_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mdlidar.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mdlidar.State)
  size_t total_size = 0;

  // .mdlidar.Vector3D position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // .mdlidar.Orientation orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  // .mdlidar.Vector3D position_p = 3;
  if (this->has_position_p()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_p_);
  }

  // .mdlidar.Orientation orientation_p = 4;
  if (this->has_orientation_p()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_p_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mdlidar.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mdlidar.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mdlidar.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mdlidar.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::mdlidar::Vector3D::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::mdlidar::Orientation::MergeFrom(from.orientation());
  }
  if (from.has_position_p()) {
    mutable_position_p()->::mdlidar::Vector3D::MergeFrom(from.position_p());
  }
  if (from.has_orientation_p()) {
    mutable_orientation_p()->::mdlidar::Orientation::MergeFrom(from.orientation_p());
  }
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mdlidar.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mdlidar.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    State* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void State::UnsafeArenaSwap(State* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  std::swap(position_, other->position_);
  std::swap(orientation_, other->orientation_);
  std::swap(position_p_, other->position_p_);
  std::swap(orientation_p_, other->orientation_p_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_mdlidar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mdlidar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// State

// .mdlidar.Vector3D position = 1;
bool State::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
void State::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::mdlidar::Vector3D& State::position() const {
  // @@protoc_insertion_point(field_get:mdlidar.State.position)
  return position_ != NULL ? *position_
                         : *::mdlidar::Vector3D::internal_default_instance();
}
::mdlidar::Vector3D* State::mutable_position() {
  
  if (position_ == NULL) {
    _slow_mutable_position();
  }
  // @@protoc_insertion_point(field_mutable:mdlidar.State.position)
  return position_;
}
::mdlidar::Vector3D* State::release_position() {
  // @@protoc_insertion_point(field_release:mdlidar.State.position)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_position();
  } else {
    ::mdlidar::Vector3D* temp = position_;
    position_ = NULL;
    return temp;
  }
}
 void State::set_allocated_position(::mdlidar::Vector3D* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position != NULL) {
    _slow_set_allocated_position(message_arena, &position);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mdlidar.State.position)
}

// .mdlidar.Orientation orientation = 2;
bool State::has_orientation() const {
  return this != internal_default_instance() && orientation_ != NULL;
}
void State::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::mdlidar::Orientation& State::orientation() const {
  // @@protoc_insertion_point(field_get:mdlidar.State.orientation)
  return orientation_ != NULL ? *orientation_
                         : *::mdlidar::Orientation::internal_default_instance();
}
::mdlidar::Orientation* State::mutable_orientation() {
  
  if (orientation_ == NULL) {
    _slow_mutable_orientation();
  }
  // @@protoc_insertion_point(field_mutable:mdlidar.State.orientation)
  return orientation_;
}
::mdlidar::Orientation* State::release_orientation() {
  // @@protoc_insertion_point(field_release:mdlidar.State.orientation)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_orientation();
  } else {
    ::mdlidar::Orientation* temp = orientation_;
    orientation_ = NULL;
    return temp;
  }
}
 void State::set_allocated_orientation(::mdlidar::Orientation* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete orientation_;
  }
  if (orientation != NULL) {
    _slow_set_allocated_orientation(message_arena, &orientation);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mdlidar.State.orientation)
}

// .mdlidar.Vector3D position_p = 3;
bool State::has_position_p() const {
  return this != internal_default_instance() && position_p_ != NULL;
}
void State::clear_position_p() {
  if (GetArenaNoVirtual() == NULL && position_p_ != NULL) delete position_p_;
  position_p_ = NULL;
}
const ::mdlidar::Vector3D& State::position_p() const {
  // @@protoc_insertion_point(field_get:mdlidar.State.position_p)
  return position_p_ != NULL ? *position_p_
                         : *::mdlidar::Vector3D::internal_default_instance();
}
::mdlidar::Vector3D* State::mutable_position_p() {
  
  if (position_p_ == NULL) {
    _slow_mutable_position_p();
  }
  // @@protoc_insertion_point(field_mutable:mdlidar.State.position_p)
  return position_p_;
}
::mdlidar::Vector3D* State::release_position_p() {
  // @@protoc_insertion_point(field_release:mdlidar.State.position_p)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_position_p();
  } else {
    ::mdlidar::Vector3D* temp = position_p_;
    position_p_ = NULL;
    return temp;
  }
}
 void State::set_allocated_position_p(::mdlidar::Vector3D* position_p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_p_;
  }
  if (position_p != NULL) {
    _slow_set_allocated_position_p(message_arena, &position_p);
  }
  position_p_ = position_p;
  if (position_p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mdlidar.State.position_p)
}

// .mdlidar.Orientation orientation_p = 4;
bool State::has_orientation_p() const {
  return this != internal_default_instance() && orientation_p_ != NULL;
}
void State::clear_orientation_p() {
  if (GetArenaNoVirtual() == NULL && orientation_p_ != NULL) delete orientation_p_;
  orientation_p_ = NULL;
}
const ::mdlidar::Orientation& State::orientation_p() const {
  // @@protoc_insertion_point(field_get:mdlidar.State.orientation_p)
  return orientation_p_ != NULL ? *orientation_p_
                         : *::mdlidar::Orientation::internal_default_instance();
}
::mdlidar::Orientation* State::mutable_orientation_p() {
  
  if (orientation_p_ == NULL) {
    _slow_mutable_orientation_p();
  }
  // @@protoc_insertion_point(field_mutable:mdlidar.State.orientation_p)
  return orientation_p_;
}
::mdlidar::Orientation* State::release_orientation_p() {
  // @@protoc_insertion_point(field_release:mdlidar.State.orientation_p)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_orientation_p();
  } else {
    ::mdlidar::Orientation* temp = orientation_p_;
    orientation_p_ = NULL;
    return temp;
  }
}
 void State::set_allocated_orientation_p(::mdlidar::Orientation* orientation_p) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete orientation_p_;
  }
  if (orientation_p != NULL) {
    _slow_set_allocated_orientation_p(message_arena, &orientation_p);
  }
  orientation_p_ = orientation_p;
  if (orientation_p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mdlidar.State.orientation_p)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kRangeFieldNumber;
const int Point::kRotationFieldNumber;
const int Point::kObjectIdFieldNumber;
const int Point::kDynamicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mdlidar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mdlidar.Point)
}
Point::Point(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mdlidar_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mdlidar.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&range_, &from.range_,
    reinterpret_cast<char*>(&dynamic_) -
    reinterpret_cast<char*>(&range_) + sizeof(dynamic_));
  // @@protoc_insertion_point(copy_constructor:mdlidar.Point)
}

void Point::SharedCtor() {
  ::memset(&range_, 0, reinterpret_cast<char*>(&dynamic_) -
    reinterpret_cast<char*>(&range_) + sizeof(dynamic_));
  _cached_size_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:mdlidar.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_mdlidar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mdlidar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  protobuf_mdlidar_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point* Point::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Point>(arena);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:mdlidar.Point)
  ::memset(&range_, 0, reinterpret_cast<char*>(&dynamic_) -
    reinterpret_cast<char*>(&range_) + sizeof(dynamic_));
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mdlidar.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 object_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dynamic = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dynamic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mdlidar.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mdlidar.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mdlidar.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float range = 1;
  if (this->range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->range(), output);
  }

  // float rotation = 2;
  if (this->rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rotation(), output);
  }

  // int32 object_id = 3;
  if (this->object_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->object_id(), output);
  }

  // bool dynamic = 4;
  if (this->dynamic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->dynamic(), output);
  }

  // @@protoc_insertion_point(serialize_end:mdlidar.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mdlidar.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float range = 1;
  if (this->range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->range(), target);
  }

  // float rotation = 2;
  if (this->rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rotation(), target);
  }

  // int32 object_id = 3;
  if (this->object_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->object_id(), target);
  }

  // bool dynamic = 4;
  if (this->dynamic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->dynamic(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mdlidar.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mdlidar.Point)
  size_t total_size = 0;

  // float range = 1;
  if (this->range() != 0) {
    total_size += 1 + 4;
  }

  // float rotation = 2;
  if (this->rotation() != 0) {
    total_size += 1 + 4;
  }

  // int32 object_id = 3;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->object_id());
  }

  // bool dynamic = 4;
  if (this->dynamic() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mdlidar.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mdlidar.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mdlidar.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mdlidar.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.range() != 0) {
    set_range(from.range());
  }
  if (from.rotation() != 0) {
    set_rotation(from.rotation());
  }
  if (from.object_id() != 0) {
    set_object_id(from.object_id());
  }
  if (from.dynamic() != 0) {
    set_dynamic(from.dynamic());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mdlidar.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mdlidar.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Point* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Point::UnsafeArenaSwap(Point* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(range_, other->range_);
  std::swap(rotation_, other->rotation_);
  std::swap(object_id_, other->object_id_);
  std::swap(dynamic_, other->dynamic_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_mdlidar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mdlidar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// float range = 1;
void Point::clear_range() {
  range_ = 0;
}
float Point::range() const {
  // @@protoc_insertion_point(field_get:mdlidar.Point.range)
  return range_;
}
void Point::set_range(float value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:mdlidar.Point.range)
}

// float rotation = 2;
void Point::clear_rotation() {
  rotation_ = 0;
}
float Point::rotation() const {
  // @@protoc_insertion_point(field_get:mdlidar.Point.rotation)
  return rotation_;
}
void Point::set_rotation(float value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:mdlidar.Point.rotation)
}

// int32 object_id = 3;
void Point::clear_object_id() {
  object_id_ = 0;
}
::google::protobuf::int32 Point::object_id() const {
  // @@protoc_insertion_point(field_get:mdlidar.Point.object_id)
  return object_id_;
}
void Point::set_object_id(::google::protobuf::int32 value) {
  
  object_id_ = value;
  // @@protoc_insertion_point(field_set:mdlidar.Point.object_id)
}

// bool dynamic = 4;
void Point::clear_dynamic() {
  dynamic_ = false;
}
bool Point::dynamic() const {
  // @@protoc_insertion_point(field_get:mdlidar.Point.dynamic)
  return dynamic_;
}
void Point::set_dynamic(bool value) {
  
  dynamic_ = value;
  // @@protoc_insertion_point(field_set:mdlidar.Point.dynamic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Frame::_slow_mutable_state() {
  state_ = ::google::protobuf::Arena::CreateMessage< ::mdlidar::State >(
      GetArenaNoVirtual());
}
::mdlidar::State* Frame::_slow_release_state() {
  if (state_ == NULL) {
    return NULL;
  } else {
    ::mdlidar::State* temp = new ::mdlidar::State(*state_);
    state_ = NULL;
    return temp;
  }
}
::mdlidar::State* Frame::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mdlidar.Frame.state)
  
  ::mdlidar::State* temp = state_;
  state_ = NULL;
  return temp;
}
void Frame::_slow_set_allocated_state(
    ::google::protobuf::Arena* message_arena, ::mdlidar::State** state) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*state) == NULL) {
      message_arena->Own(*state);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*state)) {
      ::mdlidar::State* new_state = 
            ::google::protobuf::Arena::CreateMessage< ::mdlidar::State >(
            message_arena);
      new_state->CopyFrom(**state);
      *state = new_state;
    }
}
void Frame::unsafe_arena_set_allocated_state(
    ::mdlidar::State* state) {
  if (GetArenaNoVirtual() == NULL) {
    delete state_;
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mdlidar.Frame.state)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kStartTimeFieldNumber;
const int Frame::kEndTimeFieldNumber;
const int Frame::kPointsFieldNumber;
const int Frame::kStateFieldNumber;
const int Frame::kObjectStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mdlidar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mdlidar.Frame)
}
Frame::Frame(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  points_(arena),
  object_state_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mdlidar_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mdlidar.Frame)
}
Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      object_state_(from.object_state_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::mdlidar::State(*from.state_);
  } else {
    state_ = NULL;
  }
  ::memcpy(&start_time_, &from.start_time_,
    reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:mdlidar.Frame)
}

void Frame::SharedCtor() {
  ::memset(&state_, 0, reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&state_) + sizeof(end_time_));
  _cached_size_ = 0;
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:mdlidar.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete state_;
  }
}

void Frame::ArenaDtor(void* object) {
  Frame* _this = reinterpret_cast< Frame* >(object);
  (void)_this;
}
void Frame::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_mdlidar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mdlidar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Frame& Frame::default_instance() {
  protobuf_mdlidar_2eproto::InitDefaults();
  return *internal_default_instance();
}

Frame* Frame::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Frame>(arena);
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:mdlidar.Frame)
  points_.Clear();
  object_state_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  ::memset(&start_time_, 0, reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(end_time_));
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mdlidar.Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mdlidar.Point points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mdlidar.State state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mdlidar.State object_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mdlidar.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mdlidar.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mdlidar.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_time = 1;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_time(), output);
  }

  // int64 end_time = 2;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end_time(), output);
  }

  // repeated .mdlidar.Point points = 3;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->points(i), output);
  }

  // .mdlidar.State state = 4;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->state_, output);
  }

  // repeated .mdlidar.State object_state = 5;
  for (unsigned int i = 0, n = this->object_state_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->object_state(i), output);
  }

  // @@protoc_insertion_point(serialize_end:mdlidar.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mdlidar.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start_time = 1;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_time(), target);
  }

  // int64 end_time = 2;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end_time(), target);
  }

  // repeated .mdlidar.Point points = 3;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->points(i), deterministic, target);
  }

  // .mdlidar.State state = 4;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->state_, deterministic, target);
  }

  // repeated .mdlidar.State object_state = 5;
  for (unsigned int i = 0, n = this->object_state_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->object_state(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mdlidar.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mdlidar.Frame)
  size_t total_size = 0;

  // repeated .mdlidar.Point points = 3;
  {
    unsigned int count = this->points_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(i));
    }
  }

  // repeated .mdlidar.State object_state = 5;
  {
    unsigned int count = this->object_state_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_state(i));
    }
  }

  // .mdlidar.State state = 4;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->state_);
  }

  // int64 start_time = 1;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start_time());
  }

  // int64 end_time = 2;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mdlidar.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mdlidar.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mdlidar.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mdlidar.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  object_state_.MergeFrom(from.object_state_);
  if (from.has_state()) {
    mutable_state()->::mdlidar::State::MergeFrom(from.state());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mdlidar.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mdlidar.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Frame* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Frame::UnsafeArenaSwap(Frame* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  points_.InternalSwap(&other->points_);
  object_state_.InternalSwap(&other->object_state_);
  std::swap(state_, other->state_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_mdlidar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mdlidar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Frame

// int64 start_time = 1;
void Frame::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Frame::start_time() const {
  // @@protoc_insertion_point(field_get:mdlidar.Frame.start_time)
  return start_time_;
}
void Frame::set_start_time(::google::protobuf::int64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:mdlidar.Frame.start_time)
}

// int64 end_time = 2;
void Frame::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Frame::end_time() const {
  // @@protoc_insertion_point(field_get:mdlidar.Frame.end_time)
  return end_time_;
}
void Frame::set_end_time(::google::protobuf::int64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:mdlidar.Frame.end_time)
}

// repeated .mdlidar.Point points = 3;
int Frame::points_size() const {
  return points_.size();
}
void Frame::clear_points() {
  points_.Clear();
}
const ::mdlidar::Point& Frame::points(int index) const {
  // @@protoc_insertion_point(field_get:mdlidar.Frame.points)
  return points_.Get(index);
}
::mdlidar::Point* Frame::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:mdlidar.Frame.points)
  return points_.Mutable(index);
}
::mdlidar::Point* Frame::add_points() {
  // @@protoc_insertion_point(field_add:mdlidar.Frame.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::mdlidar::Point >*
Frame::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:mdlidar.Frame.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::mdlidar::Point >&
Frame::points() const {
  // @@protoc_insertion_point(field_list:mdlidar.Frame.points)
  return points_;
}

// .mdlidar.State state = 4;
bool Frame::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
void Frame::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
  state_ = NULL;
}
const ::mdlidar::State& Frame::state() const {
  // @@protoc_insertion_point(field_get:mdlidar.Frame.state)
  return state_ != NULL ? *state_
                         : *::mdlidar::State::internal_default_instance();
}
::mdlidar::State* Frame::mutable_state() {
  
  if (state_ == NULL) {
    _slow_mutable_state();
  }
  // @@protoc_insertion_point(field_mutable:mdlidar.Frame.state)
  return state_;
}
::mdlidar::State* Frame::release_state() {
  // @@protoc_insertion_point(field_release:mdlidar.Frame.state)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_state();
  } else {
    ::mdlidar::State* temp = state_;
    state_ = NULL;
    return temp;
  }
}
 void Frame::set_allocated_state(::mdlidar::State* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state != NULL) {
    _slow_set_allocated_state(message_arena, &state);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mdlidar.Frame.state)
}

// repeated .mdlidar.State object_state = 5;
int Frame::object_state_size() const {
  return object_state_.size();
}
void Frame::clear_object_state() {
  object_state_.Clear();
}
const ::mdlidar::State& Frame::object_state(int index) const {
  // @@protoc_insertion_point(field_get:mdlidar.Frame.object_state)
  return object_state_.Get(index);
}
::mdlidar::State* Frame::mutable_object_state(int index) {
  // @@protoc_insertion_point(field_mutable:mdlidar.Frame.object_state)
  return object_state_.Mutable(index);
}
::mdlidar::State* Frame::add_object_state() {
  // @@protoc_insertion_point(field_add:mdlidar.Frame.object_state)
  return object_state_.Add();
}
::google::protobuf::RepeatedPtrField< ::mdlidar::State >*
Frame::mutable_object_state() {
  // @@protoc_insertion_point(field_mutable_list:mdlidar.Frame.object_state)
  return &object_state_;
}
const ::google::protobuf::RepeatedPtrField< ::mdlidar::State >&
Frame::object_state() const {
  // @@protoc_insertion_point(field_list:mdlidar.Frame.object_state)
  return object_state_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kObjectIdsFieldNumber;
const int Header::kDeltaTimeFieldNumber;
const int Header::kChannelsCountFieldNumber;
const int Header::kPointsCountByChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mdlidar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mdlidar.Header)
}
Header::Header(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  object_ids_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_mdlidar_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mdlidar.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_ids_(from.object_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&delta_time_, &from.delta_time_,
    reinterpret_cast<char*>(&points_count_by_channel_) -
    reinterpret_cast<char*>(&delta_time_) + sizeof(points_count_by_channel_));
  // @@protoc_insertion_point(copy_constructor:mdlidar.Header)
}

void Header::SharedCtor() {
  ::memset(&delta_time_, 0, reinterpret_cast<char*>(&points_count_by_channel_) -
    reinterpret_cast<char*>(&delta_time_) + sizeof(points_count_by_channel_));
  _cached_size_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:mdlidar.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_mdlidar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mdlidar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  protobuf_mdlidar_2eproto::InitDefaults();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Header>(arena);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:mdlidar.Header)
  object_ids_.Clear();
  ::memset(&delta_time_, 0, reinterpret_cast<char*>(&points_count_by_channel_) -
    reinterpret_cast<char*>(&delta_time_) + sizeof(points_count_by_channel_));
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mdlidar.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 object_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_object_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_object_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float delta_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channels_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 points_count_by_channel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_count_by_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mdlidar.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mdlidar.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mdlidar.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 object_ids = 1;
  if (this->object_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_object_ids_cached_byte_size_);
  }
  for (int i = 0, n = this->object_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->object_ids(i), output);
  }

  // float delta_time = 2;
  if (this->delta_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->delta_time(), output);
  }

  // int32 channels_count = 3;
  if (this->channels_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channels_count(), output);
  }

  // uint32 points_count_by_channel = 4;
  if (this->points_count_by_channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->points_count_by_channel(), output);
  }

  // @@protoc_insertion_point(serialize_end:mdlidar.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mdlidar.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 object_ids = 1;
  if (this->object_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _object_ids_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->object_ids_, target);
  }

  // float delta_time = 2;
  if (this->delta_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->delta_time(), target);
  }

  // int32 channels_count = 3;
  if (this->channels_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channels_count(), target);
  }

  // uint32 points_count_by_channel = 4;
  if (this->points_count_by_channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->points_count_by_channel(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mdlidar.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mdlidar.Header)
  size_t total_size = 0;

  // repeated uint32 object_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->object_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _object_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float delta_time = 2;
  if (this->delta_time() != 0) {
    total_size += 1 + 4;
  }

  // int32 channels_count = 3;
  if (this->channels_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channels_count());
  }

  // uint32 points_count_by_channel = 4;
  if (this->points_count_by_channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->points_count_by_channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mdlidar.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mdlidar.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mdlidar.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mdlidar.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_ids_.MergeFrom(from.object_ids_);
  if (from.delta_time() != 0) {
    set_delta_time(from.delta_time());
  }
  if (from.channels_count() != 0) {
    set_channels_count(from.channels_count());
  }
  if (from.points_count_by_channel() != 0) {
    set_points_count_by_channel(from.points_count_by_channel());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mdlidar.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mdlidar.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Header* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Header::UnsafeArenaSwap(Header* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  object_ids_.InternalSwap(&other->object_ids_);
  std::swap(delta_time_, other->delta_time_);
  std::swap(channels_count_, other->channels_count_);
  std::swap(points_count_by_channel_, other->points_count_by_channel_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_mdlidar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mdlidar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// repeated uint32 object_ids = 1;
int Header::object_ids_size() const {
  return object_ids_.size();
}
void Header::clear_object_ids() {
  object_ids_.Clear();
}
::google::protobuf::uint32 Header::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:mdlidar.Header.object_ids)
  return object_ids_.Get(index);
}
void Header::set_object_ids(int index, ::google::protobuf::uint32 value) {
  object_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mdlidar.Header.object_ids)
}
void Header::add_object_ids(::google::protobuf::uint32 value) {
  object_ids_.Add(value);
  // @@protoc_insertion_point(field_add:mdlidar.Header.object_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Header::object_ids() const {
  // @@protoc_insertion_point(field_list:mdlidar.Header.object_ids)
  return object_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Header::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:mdlidar.Header.object_ids)
  return &object_ids_;
}

// float delta_time = 2;
void Header::clear_delta_time() {
  delta_time_ = 0;
}
float Header::delta_time() const {
  // @@protoc_insertion_point(field_get:mdlidar.Header.delta_time)
  return delta_time_;
}
void Header::set_delta_time(float value) {
  
  delta_time_ = value;
  // @@protoc_insertion_point(field_set:mdlidar.Header.delta_time)
}

// int32 channels_count = 3;
void Header::clear_channels_count() {
  channels_count_ = 0;
}
::google::protobuf::int32 Header::channels_count() const {
  // @@protoc_insertion_point(field_get:mdlidar.Header.channels_count)
  return channels_count_;
}
void Header::set_channels_count(::google::protobuf::int32 value) {
  
  channels_count_ = value;
  // @@protoc_insertion_point(field_set:mdlidar.Header.channels_count)
}

// uint32 points_count_by_channel = 4;
void Header::clear_points_count_by_channel() {
  points_count_by_channel_ = 0u;
}
::google::protobuf::uint32 Header::points_count_by_channel() const {
  // @@protoc_insertion_point(field_get:mdlidar.Header.points_count_by_channel)
  return points_count_by_channel_;
}
void Header::set_points_count_by_channel(::google::protobuf::uint32 value) {
  
  points_count_by_channel_ = value;
  // @@protoc_insertion_point(field_set:mdlidar.Header.points_count_by_channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mdlidar

// @@protoc_insertion_point(global_scope)
